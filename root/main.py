import nextcord
from nextcord import SlashOption
from nextcord.ext import commands
import datetime
import json
import os
import sqlite3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def adapt_datetime(ts):
    return ts.strftime('%Y-%m-%d %H:%M:%S')
sqlite3.register_adapter(datetime.datetime, adapt_datetime)
sql = sqlite3.connect("database.db", detect_types=sqlite3.PARSE_DECLTYPES)
cursor = sql.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS bot_warns (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    reason TEXT NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expired_days INT,
    UNIQUE(user_id, id)
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS bot_bans (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    admin_id INTEGER NOT NULL,
    reason TEXT NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expired TIMESTAMP,
    appelation BOOLEAN,
    UNIQUE(user_id, id)
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS bot_invites (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    invite_code TEXT NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expired TIMESTAMP,
    count BOOLEAN,
    UNIQUE(user_id, id)
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS bot_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    invite_id INTEGER NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, id)
);
""")
sql.commit()


current_dir = os.path.dirname(os.path.abspath(__file__))
token_file = os.path.join(current_dir, "token")
# import locale
# locale.setlocale(locale.LC_ALL, ('C', 'UTF-8')) # –í–º–µ—Å—Ç–æ C —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ru_RU, –ø—Ä–∏ —ç—Ç–æ–º —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –µ—Å—Ç—å —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç ru_RU.UTF-8 —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É locale -a
# print(locale.getlocale())   
with open(token_file, "r") as f:
    TOKEN = f.read().strip()

intents = nextcord.Intents.default()
intents.members = True
intents.messages = True
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)

notification_channel_id = 1242246527712235582
gateway_channel_id = 1242216834237992990

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f'\n–ë–æ—Ç {bot.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.\n')


# –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
@bot.event
async def on_member_join(member):
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    print(f'–£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –Ω–∞–º! {member.display_name}')
    channel = bot.get_channel(gateway_channel_id)
    if member.bot:
        return
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–∏—Ö–æ–∂–µ–π
    elif channel is not None:
        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await channel.send(f'<@{member.id}>')
        # EMBED 1
        embed_1 = nextcord.Embed(
            description=f"‚†Ä\nüëãüèª‚†Ä‚†Ä**–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º Discord —Å–µ—Ä–≤–µ—Ä–µ!**",
            color=0xA7A7D7
        )
        # –§–ò–õ–õ–ï–†
        embed_1.set_image(url="https://i.ibb.co/ZWBrwLk/filler.png")
        await channel.send(embed=embed_1)
        # EMBED 2
        embed_2 = nextcord.Embed(
            description=f"‚†Ä\n**–°–æ–≤–µ—Ç—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏:**\n‚†Ä\n> - <#1242213724262105190>\n> - <#1242221576611696811>\n> - <#1242229530861768856>\n‚†Ä\n**–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª:**\n‚†Ä\n> –ü–†–ò–ì–õ–ê–°–ò–õ: –ø–æ–∫–∞ –Ω–µ—Ç—É",
            color=0xA7A7D7
        )
        # –§–ò–õ–õ–ï–†
        embed_2.set_image(url="https://i.ibb.co/ZWBrwLk/filler.png")
        await channel.send(embed=embed_2)
        # EMBED 3
        embed_3 = nextcord.Embed(
            description=""
        )
        # –ö–ê–†–¢–ò–ù–ö–ê
        embed_3.set_image(url="https://i.ibb.co/jWQhTGH/gateway.png")
        await channel.send(embed=embed_3)
        print(bot.user.id,'joined')
        ## USER IS BANNED ##
        answer = cursor.execute(f'SELECT `appelation` FROM `bot_bans` WHERE `bot_bans`.`user_id` = {member.id}').fetchall()
        print(answer)
        if len(answer) >= 1:
            has_ban = bool(answer[0][0])
            role_id = 1242234027742859294 if has_ban else 1242232941422051358
            role = member.guild.get_role(role_id)
            await member.add_roles(role)
        sql.commit()
        ## END USER IS BANNED ##
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –í—ã—à–µ–ª —É—á–∞—Å—Ç–Ω–∏–∫
@bot.event
async def on_member_remove(member):
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    print(f'–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –Ω–∞—Å! {member.display_name}')
    channel = bot.get_channel(gateway_channel_id)
    if member.bot:
        return
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—Ä–∏—Ö–æ–∂–µ–π
    elif channel is not None:
        # EMBED 1
        embed_1 = nextcord.Embed(
            description=f"‚†Ä\nüëãüèª‚†Ä‚†Ä**–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!**",
            color=0xA7A7D7
        )
        # –§–ò–õ–õ–ï–†
        embed_1.set_image(url="https://i.ibb.co/ZWBrwLk/filler.png")
        await channel.send(embed=embed_1)
        # EMBED 2
        embed_2 = nextcord.Embed(
            description=f"‚†Ä\n**–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è —Å–Ω–æ–≤–∞!**\n‚†Ä\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª:**\n‚†Ä\n> –ü–†–ò–ì–õ–ê–°–ò–õ: –ø–æ–∫–∞ –Ω–µ—Ç",
            color=0xA7A7D7
        )
        # –§–ò–õ–õ–ï–†
        embed_2.set_image(url="https://i.ibb.co/ZWBrwLk/filler.png")
        await channel.send(embed=embed_2)
        # EMBED 3
        embed_3 = nextcord.Embed(
            description=""
        )
        # –ö–ê–†–¢–ò–ù–ö–ê
        embed_3.set_image(url="https://i.ibb.co/jWQhTGH/gateway.png")
        await channel.send(embed=embed_3)
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –ü–∏–Ω–≥ –±–æ—Ç–∞
@bot.slash_command()
async def ping(ctx):
    latency = bot.latency * 1000
    embed = nextcord.Embed(
        title="Pong!",
        description=f"–ó–∞–¥–µ—Ä–∂–∫–∞: {latency:.2f} –º—Å",
        color=0xA7A7D7
    )
    await ctx.send(embed=embed)


# –û—Ç–ø—Ä–∞–≤–∫–∞ JSON
@bot.slash_command(description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.")
@commands.has_any_role(1242265397735067698, 1242267372052545576)
async def send_json(ctx: nextcord.Interaction, attachment: nextcord.Attachment, channel: nextcord.TextChannel):
    await ctx.response.defer()

    if not attachment.filename.endswith('.json'):
        await ctx.followup.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ JSON.")
        return

    try:
        file_content = await attachment.read()
        data = json.loads(file_content)
    except json.JSONDecodeError:
        await ctx.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–µ—Å—Ç—å JSON.")
        return

    try:
        for item in data['embeds']:
            embed = nextcord.Embed.from_dict(item)
            await channel.send(embed=embed)
        await ctx.followup.send("–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await ctx.followup.send(f"–û—à–∏–±–∫–∞: {str(e)}")


# –ë–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞
@bot.slash_command(name="ban", description="–í—ã–¥–∞—Ç—å –±–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫—É")
async def ban(
    ctx: nextcord.Interaction, 
    member: nextcord.Member, 
    duration: int, 
    reason: str, 
    appeal: str = SlashOption(
        name="appeal",
        choices={
            "–° –∞–ø–µ–ª–ª—è—Ü–∏–µ–π": "appeal", 
            "–ë–µ–∑ –∞–ø–µ–ª–ª—è—Ü–∏–∏": "noappeal"
        },
        required=True
    )
):
    try:
        guild = ctx.guild
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if not guild:
            await ctx.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return

        # ID –±–∞–Ω-—Ä–æ–ª–µ–π
        ban_appeal = guild.get_role(1242234027742859294)
        ban_no_appeal = guild.get_role(1242232941422051358)

        # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω-—Ä–æ–ª–µ–π
        if ctx.user.top_role.id not in [1242265397735067698, 1242267372052545576, 1242266974713544825]:
            await ctx.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ –±–∞–Ω–µ
        if member.get_role(1242234027742859294) is not None and member.get_role(1242232941422051358) is not None:
            await ctx.response.send_message("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–Ω–µ.")
            return 
        
        # –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è
        if ctx.user.mention == member.mention:
            print(f"{ctx.user.display_name} –¥–æ–ª–±–æ—ë–± - –ø—ã—Ç–∞–ª—Å—è —Å–µ–±—è –∑–∞–±–∞–Ω–∏—Ç—å =-=") # –ê–π-—è–π-—è–π Foxanto
            await ctx.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è.")
            return
        
        # –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏–∏
        if appeal == "appeal":
            await member.add_roles(ban_appeal)
            appeal_text = '\n\n- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n> –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏!\n> –í –∫–∞–Ω–∞–ª–µ <#1242228411280265388>'
        else:
            await member.add_roles(ban_no_appeal)
            appeal_text = ''

        unban_time = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=duration)
        
        # –û—Ç–≤–µ—Ç –Ω–∞ –±–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await ctx.response.send_message(f"{member.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration}—á. –ø–æ –ø—Ä–∏—á–∏–Ω–µ: \"{reason}\".")

        channel = bot.get_channel(1242246527712235582)
        ## ADD NEW DATA IN DATABASE ##

        unban_time_sql = adapt_datetime(unban_time)
        sql.execute('INSERT INTO bot_bans (user_id, admin_id, reason, expired, appelation) VALUES (?, ?, ?, ?, ?)', (member.id, ctx.user.id, reason, unban_time_sql, ('appeal' in appeal)))
        sql.commit()
        ## END ADD NEW DATA IN DATABASE ##
        if not channel:
            await ctx.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await channel.send(f'<@{member.id}>')
        # EMBED 1
        embed_1 = nextcord.Embed(
            description=f"‚†Ä\n‚ÄºÔ∏è‚†Ä‚†Ä**–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä–∞!**\n‚†Ä\n‚ùì‚†Ä‚†Ä–ö–∞–Ω–∞–ª —Å —á–∞—Å—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏: <#1242236181505376366>\n‚†Ä\n- –°—Ä–æ–∫ –≤–∞—à–µ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:\n> {duration}—á.\n‚†Ä\n- –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:\n> {reason}\n‚†Ä\n- –ù–∞–∫–∞–∑–∞–Ω–∏–µ –≤—ã–¥–∞–ª(-–∞):\n> <@{ctx.user.id}>\n‚†Ä\n- –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è:\n> {unban_time.strftime('%d %B %Y, %H:%M')} (UTC){appeal_text}",
            color=0xA7A7D7
        )
        embed_1.set_image(url="https://i.ibb.co/b21F1Mf/ban.png")
        #embed_1.set_image(url="https://i.ibb.co/ZWBrwLk/filler.png")
        await channel.send(embed=embed_1)
        await member.send(embed=embed_1)

    except Exception as e:
        await ctx.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –°–Ω—è—Ç—å –±–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞
@bot.slash_command(name="unban", description="–£–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def unban(
    ctx: nextcord.Interaction, 
    member: nextcord.Member, 
    reason: str, 
):
    try:
        guild = ctx.guild
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if not guild:
            await ctx.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return

        ban_appeal = guild.get_role(1242234027742859294)
        ban_no_appeal = guild.get_role(1242232941422051358)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–µ–π
        if ctx.user.top_role.id not in [1242265397735067698, 1242267372052545576, 1242266974713544825]:
            await ctx.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Å–µ–±—è
        if ctx.user.mention == member.mention:
            print(f"{ctx.user.display_name} –¥–æ–ª–±–æ—ë–± - –ø—ã—Ç–∞–ª—Å—è —Å–µ–±—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å =-=") # –ê–π-—è–π-—è–π Foxanto X2
            await ctx.response.send_message("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω
        if member.get_role(1242234027742859294) is not None and member.get_role(1242232941422051358) is not None:
            await ctx.response.send_message("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω!")
            return
        if ban_appeal in member.roles or ban_no_appeal in member.roles:
            if ban_appeal in member.roles:
                await member.remove_roles(ban_appeal)
                await ctx.response.send_message(f'‚†Ä\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.user.mention}\n‚†Ä\n–ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞: **{reason}**\n‚†Ä\n–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –±–∞–Ω —Å –∞–ø–ø–µ–ª—è—Ü–∏–µ–π.')
                await member.send(f'–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.user.mention}\n**–ù–∞—á–∏–Ω–∞–π—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º!**')
                
            if ban_no_appeal in member.roles:
                await member.remove_roles(ban_no_appeal)
                await ctx.response.send_message(f'‚†Ä\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.user.mention}\n‚†Ä\n–ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞: **{reason}**\n‚†Ä\n–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –±–∞–Ω –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–ø–ø–µ–ª—è—Ü–∏–∏.')
                await member.send(f'–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ctx.user.mention}\n**–ù–∞—á–∏–Ω–∞–π—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º!**')
        else:
            await ctx.response.send_message("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω!")
            
        channel = bot.get_channel(1242246527712235582)
        if not channel:
            await ctx.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        embed = nextcord.Embed(
            description=f"‚†Ä\n-–†–∞–∑–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n> {member.mention}\n‚†Ä\n- –ü—Ä–∏—á–∏–Ω–∞:\n> {reason}\n‚†Ä\n- –ù–∞–∫–∞–∑–∞–Ω–∏–µ —Å–Ω—è–ª(-–∞):\n> <@{ctx.user.id}>\n",
            color=0xA7A7D7
        )
        await channel.send(embed=
                           embed)
        
    except Exception as e:
        await ctx.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@bot.slash_command(name="warn", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def warn(
    ctx: nextcord.Interaction, 
    member: nextcord.Member, 
    duration: int = SlashOption(
        name="duration",
        choices={
            "–ù–∞–≤—Å–µ–≥–¥–∞": 0, 
            "30 –¥–Ω–µ–π": 30, 
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π": -1
        },
        required=True
    ), 
    reason: str = SlashOption(
        name="reason",
        required=True
    )):
    if duration == -1:
        modal = nextcord.ui.Modal(title="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ä–æ–∫")
        
        custom_duration = nextcord.ui.TextInput(
            label="–°—Ä–æ–∫ –≤ –¥–Ω—è—Ö",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π",
            required=True
        )

        if ctx.user.top_role.id not in [1242265397735067698, 1242267372052545576, 1242266974713544825]:
            await ctx.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        modal.add_item(custom_duration)
        
        async def modal_callback(interaction: nextcord.Interaction):
            custom_duration_value = custom_duration.value
            try:
                
                await interaction.response.send_message(f"–í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} –Ω–∞ —Å—Ä–æ–∫ {custom_duration_value}, –ø—Ä–∏—á–∏–Ω–∞: {reason}") 
                await member.send(f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—Ä–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}\n–ü–æ–ª—É—á–∏–ª–∏ –≤–∞—Ä–Ω –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {interaction.user.mention}\n–°—Ä–æ–∫ –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞: {custom_duration_value} –¥–Ω–µ–π.')
            except:
                await interaction.response.send_message(f'–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–¥–∞–ª–∏ –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {member.mention}!\n–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö: {custom_duration_value}\n–ü—Ä–∏—á–∏–Ω–∞ –≤–∞—Ä–Ω–∞: {reason}')
            await interaction.response.send_message(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {custom_duration_value} –¥–Ω–µ–π.')
        modal.callback = modal_callback
        await ctx.response.send_modal(modal)
    else:
        await member.send(f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—Ä–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}\n–ü–æ–ª—É—á–∏–ª–∏ –≤–∞—Ä–Ω –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ctx.user.mention}\n–°—Ä–æ–∫ –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞: {duration}')
        await ctx.response.send_message(f"–í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} –Ω–∞ —Å—Ä–æ–∫ {duration}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
    

bot.run(TOKEN)